#include "arduino_secrets.h"
/* 
  Sketch generated by the Arduino IoT Cloud Thing "Smart Indoor Air Quality Monitor"
  https://create.arduino.cc/cloud/things/00a38e6f-6867-4b2d-b4f3-1e1358b38662 

  Arduino IoT Cloud Variables description

  The following variables are automatically generated and updated when changes are made to the Thing
 
  float gasResistance;
  float humidity;
  float pressure;
  float temperature;

  Variables which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/

#include "thingProperties.h"
#include <Wire.h>
#include <Adafruit_Sensor.h>
#include <Adafruit_BME680.h>

// Create BME680 object
Adafruit_BME680 bme;  // I2C

void setup() {
  // Initialize serial and wait for port to open:
  Serial.begin(9600);
  // This delay gives the chance to wait for a Serial Monitor without blocking if none is found
  delay(1500); 

  // Defined in thingProperties.h
  initProperties();

  // Connect to Arduino IoT Cloud
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);
  
  /*
     The following function allows you to obtain more information
     related to the state of network and IoT Cloud connection and errors
     the higher number the more granular information you’ll get.
     The default is 0 (only errors).
     Maximum is 4
 */
  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();

     // Initialize BME680
  if (!bme.begin()) {
    Serial.println("Could not find a valid BME680 sensor, check wiring!");
    while (1);
  }

    // BME680 settings
  bme.setTemperatureOversampling(BME680_OS_8X);
  bme.setHumidityOversampling(BME680_OS_2X);
  bme.setPressureOversampling(BME680_OS_4X);
  bme.setIIRFilterSize(BME680_FILTER_SIZE_3);
  bme.setGasHeater(320, 150); // 320°C for 150 ms

  
}

void loop() {
  ArduinoCloud.update();
  // Your code here 
  
  if (!bme.performReading()) {
    Serial.println("Failed to perform reading from BME680");
    return;
  }

  // Assign values to IoT Cloud variables
  temperature = bme.temperature;
  humidity = bme.humidity;
  pressure = bme.pressure / 100.0;
  gasResistance = bme.gas_resistance / 1000.0; // In KΩ

  // Print to serial for debug
  Serial.print("Temp: "); Serial.println(temperature);
  Serial.print("Humidity: "); Serial.println(humidity);
  Serial.print("Pressure: "); Serial.println(pressure);
  Serial.print("Gas: "); Serial.println(gasResistance);
  
  delay(5000); // Delay before next reading
}

/*
  Since Temperature is READ_WRITE variable, onTemperatureChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onTemperatureChange()  {
  // Add your code here to act upon Temperature change
}

/*
  Since Humidity is READ_WRITE variable, onHumidityChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onHumidityChange()  {
  // Add your code here to act upon Humidity change
}

/*
  Since Pressure is READ_WRITE variable, onPressureChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onPressureChange()  {
  // Add your code here to act upon Pressure change
}

/*
  Since GasResistance is READ_WRITE variable, onGasResistanceChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onGasResistanceChange()  {
  // Add your code here to act upon GasResistance change
}

/*
  Since AirQualityStatus is READ_WRITE variable, onAirQualityStatusChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onAirQualityStatusChange()  {
  // Add your code here to act upon AirQualityStatus change
}


